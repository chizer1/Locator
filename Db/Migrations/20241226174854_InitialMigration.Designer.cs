// <auto-generated />
using Locator.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Locator.Migrations
{
    [DbContext(typeof(LocatorContext))]
    [Migration("20241226174854_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Locator.Db.ClientEntity", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ClientStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ClientStatusID");

                    b.HasKey("ClientId")
                        .HasName("PK_Client");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Locator.Db.ClientUserEntity", b =>
                {
                    b.Property<int>("ClientUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientUserId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ClientUserId")
                        .HasName("PK_ClientUser");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("ClientUser", (string)null);
                });

            modelBuilder.Entity("Locator.Db.ConnectionEntity", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConnectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectionId"));

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int")
                        .HasColumnName("ClientUserID");

                    b.Property<int>("DatabaseId")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseID");

                    b.HasKey("ConnectionId")
                        .HasName("PK_ClientConnection");

                    b.HasIndex("DatabaseId");

                    b.HasIndex(new[] { "ClientUserId" }, "ix_ClientConnection_ClientID");

                    b.ToTable("Connection", (string)null);
                });

            modelBuilder.Entity("Locator.Db.DatabaseEntity", b =>
                {
                    b.Property<int>("DatabaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DatabaseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseId"));

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DatabaseServerId")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseServerID");

                    b.Property<byte>("DatabaseStatusId")
                        .HasColumnType("tinyint")
                        .HasColumnName("DatabaseStatusID");

                    b.Property<byte>("DatabaseTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("DatabaseTypeID");

                    b.Property<string>("DatabaseUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DatabaseId")
                        .HasName("PK_Database");

                    b.HasIndex("DatabaseServerId");

                    b.HasIndex("DatabaseTypeId");

                    b.ToTable("Database", (string)null);
                });

            modelBuilder.Entity("Locator.Db.DatabaseServerEntity", b =>
                {
                    b.Property<int>("DatabaseServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DatabaseServerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DatabaseServerId"));

                    b.Property<string>("DatabaseServerIpaddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DatabaseServerIPAddress");

                    b.Property<string>("DatabaseServerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DatabaseServerId")
                        .HasName("PK_DatabaseServer");

                    b.ToTable("DatabaseServer", (string)null);
                });

            modelBuilder.Entity("Locator.Db.DatabaseTypeEntity", b =>
                {
                    b.Property<byte>("DatabaseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("DatabaseTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("DatabaseTypeId"));

                    b.Property<string>("DatabaseTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("DatabaseTypeId")
                        .HasName("PK_DatabaseType");

                    b.ToTable("DatabaseType", (string)null);
                });

            modelBuilder.Entity("Locator.Db.PermissionEntity", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("PermissionDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PermissionId")
                        .HasName("PK_Permission");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("Locator.Db.RoleEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Auth0RoleId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Auth0RoleID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("RoleId")
                        .HasName("PK_Role_RoleID");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Locator.Db.RolePermissionEntity", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RolePermissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("RolePermissionId")
                        .HasName("PK_RolePermission");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission", (string)null);
                });

            modelBuilder.Entity("Locator.Db.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Auth0ID");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("UserStatusId")
                        .HasColumnType("tinyint")
                        .HasColumnName("UserStatusID");

                    b.HasKey("UserId")
                        .HasName("PK_User_UserID");

                    b.HasIndex(new[] { "Auth0Id" }, "ix_User_Auth0ID")
                        .IsUnique();

                    b.ToTable("User", null, t =>
                        {
                            t.HasTrigger("User_ClientID_Update_Prevention");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Locator.Db.UserRoleEntity", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId")
                        .HasName("PK_UserRole");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "UserId", "RoleId" }, "uix_UserRole_UserID_RoleID")
                        .IsUnique();

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Locator.Db.ClientUserEntity", b =>
                {
                    b.HasOne("Locator.Db.ClientEntity", "Client")
                        .WithMany("ClientUsers")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientUser_Client");

                    b.HasOne("Locator.Db.UserEntity", "User")
                        .WithMany("ClientUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ClientUser_User");

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Locator.Db.ConnectionEntity", b =>
                {
                    b.HasOne("Locator.Db.ClientUserEntity", "ClientUser")
                        .WithMany("Connections")
                        .HasForeignKey("ClientUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Connection_ClientUser");

                    b.HasOne("Locator.Db.DatabaseEntity", "Database")
                        .WithMany("Connections")
                        .HasForeignKey("DatabaseId")
                        .IsRequired()
                        .HasConstraintName("FK_Connection_Database");

                    b.Navigation("ClientUser");

                    b.Navigation("Database");
                });

            modelBuilder.Entity("Locator.Db.DatabaseEntity", b =>
                {
                    b.HasOne("Locator.Db.DatabaseServerEntity", "DatabaseServer")
                        .WithMany("Databases")
                        .HasForeignKey("DatabaseServerId")
                        .IsRequired()
                        .HasConstraintName("FK_Database_DatabaseServer");

                    b.HasOne("Locator.Db.DatabaseTypeEntity", "DatabaseType")
                        .WithMany("Databases")
                        .HasForeignKey("DatabaseTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Database_DatabaseType");

                    b.Navigation("DatabaseServer");

                    b.Navigation("DatabaseType");
                });

            modelBuilder.Entity("Locator.Db.RolePermissionEntity", b =>
                {
                    b.HasOne("Locator.Db.PermissionEntity", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Permission");

                    b.HasOne("Locator.Db.RoleEntity", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Locator.Db.UserRoleEntity", b =>
                {
                    b.HasOne("Locator.Db.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("Locator.Db.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Locator.Db.ClientEntity", b =>
                {
                    b.Navigation("ClientUsers");
                });

            modelBuilder.Entity("Locator.Db.ClientUserEntity", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("Locator.Db.DatabaseEntity", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("Locator.Db.DatabaseServerEntity", b =>
                {
                    b.Navigation("Databases");
                });

            modelBuilder.Entity("Locator.Db.DatabaseTypeEntity", b =>
                {
                    b.Navigation("Databases");
                });

            modelBuilder.Entity("Locator.Db.PermissionEntity", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Locator.Db.RoleEntity", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Locator.Db.UserEntity", b =>
                {
                    b.Navigation("ClientUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
